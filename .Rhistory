p_hat
lower_p
upper_p
p_hat = (6101+2)/(9821+4)
num_success = 6101
num_total = 9821
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
vector_agresti
print(FALSE, "Because")
print(FALSE, Because)
print(FALSE)
print(FALSE + "")
print(FALSE)
print("The lower limit is above a %60 chance to land on butter side")
num_wrinkled = 12 * (1/4)
num_wrinkled
num_wrinkled = 12 * (1/4)
vector_of_answers = c(round(num_wrinkled, 4))
vector_of_answers
p_hat = (6101+2)/(9821+4)
num_success = 6101
num_total = 9821
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
vector_agresti
num_wrinkled = 12 * (1/4)
standard_dev_wrinkled = sqrt((0.25*(1-0.25))/12)
vector_of_answers = c(round(num_wrinkled, 4), round(standard_dev_wrinkled,4))
vector_of_answers
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
return(round(d,4))
}
num_wrinkled = 12 * (1/4)
standard_dev_wrinkled = sqrt((0.25*(1-0.25))/12)
exactly_two = calcBinomP(2, 12, 0.25)
vector_of_answers = c(round(num_wrinkled, 4), round(standard_dev_wrinkled,4), round(exactly_two, 4))
vector_of_answers
num_wrinkled = 12 * (1/4)
standard_dev_wrinkled = sqrt((0.25*(1-0.25))/12)
exactly_two = dbinom(x = 2, size = 12, prob = 0.25)
vector_of_answers = c(round(num_wrinkled, 4), round(standard_dev_wrinkled,4), round(exactly_two, 4))
vector_of_answers
?pbinom
result_dog_food = pbinom(x = 2, size = 12, prob=0.2)
result_dog_food
result_dog_food = pbinom(2, size = 12, prob=0.2)
result_dog_food
result_dog_food = pbinom(2, size = 18, prob=0.2)
result_dog_food
result_dog_food = pbinom(2, size = 18, prob=0.2)
result_dog_food
print(FALSE)
p_hat = (60+2)/(1000+4)
num_success = 60
num_total = 1000
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
vector_agresti
p_hat = (60+2)/(1000+4)
num_success = 60
num_total = 1000
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
print(FALSE, TRUE)
p_hat = (60+2)/(1000+4)
num_success = 60
num_total = 1000
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
vector_T_F = c(FALSE, TRUE)
print(vector_T_F)
num_wrinkled = 12 * (1/4)
standard_dev_wrinkled = sqrt((0.25*(1-0.25))/12)
exactly_two = dbinom(x = 2, size = 12, prob = 0.25)
vector_of_answers = c(round(num_wrinkled, 4), round(standard_dev_wrinkled,4), round(exactly_two, 4))
print(vector_of_answers)
p_hat = (6101+2)/(9821+4)
num_success = 6101
num_total = 9821
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
print(vector_agresti)
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
return(round(d,4))
}
print(calcBinomP(0, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
return(round(d,4))
}
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
d = (d*(factorial(n)/(factorial(X)*factorial(n-x))))
return(round(d,4))
}
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
d = (d*(factorial(n)/(factorial(X)*factorial(n-x))))
return(round(d,4))
}
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
#d = (d*(factorial(n)/(factorial(X)*factorial(n-x))))
return(round(d,4))
}
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
#d = (d*(factorial(n)/(factorial(X)*factorial(n-x))))
return(round(d,4))
}
print(calcBinomP(4, 12, 0.25))
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
d = (d*(factorial(n)/(factorial(X)*factorial(n-x))))
return(round(d,4))
}
print(calcBinomP(4, 12, 0.25))
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
d = d*(factorial(n)/(factorial(X)*factorial(n-x)))
return(round(d,4))
}
print(calcBinomP(4, 12, 0.25))
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
?choose
calcBinomP = function(X, n, p) {
d = (p^X)*(1-p)^(n-X)
d = d*choose(n,X)
return(round(d,4))
}
print(calcBinomP(4, 12, 0.25))
print(calcBinomP(0, 7, 0.3))
print(calcBinomP(1, 7, 0.3))
print(calcBinomP(2, 7, 0.3))
print(calcBinomP(3, 7, 0.3))
print(calcBinomP(4, 7, 0.3))
print(calcBinomP(5, 7, 0.3))
print(calcBinomP(6, 7, 0.3))
print(calcBinomP(7, 7, 0.3))
print(dbinom(19, 25, 0.5))
print(dbinom(19, 25, 0.5))
print(dbinom(6, 25, 0.5))
sum = 0
i = 0
for (i in 19:25){
sum = sum + dbinom(i, 25, 0.5)
}
print(sum)
print(dbinom(19:25, 25, 0.5))
print(sum(dbinom(19:25, 25, 0.5)))
print(pbinom(19, 25, 25, 0.5))
print(pbinom(19:25, 25, 0.5))
print(pbinom(19, 25, 0.5))
source('~/Desktop/BIO365/Assignment-14/7.R', echo=TRUE)
print(pbinom(19, 25, 0.5, lower.tail = TRUE))
print(pbinom(19, 25, 0.5, lower.tail = FALSE))
print(pbinom(18, 25, 0.5, lower.tail = FALSE))
p_hat = (60+2)/(1000+4)
num_success = 60
num_total = 1000
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
vector_agresti = c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4))
vector_T_F = c(FALSE, TRUE)
print(c(FALSE, TRUE))
p_hat = (6101+2)/(9821+4)
num_success = 6101
num_total = 9821
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
print(c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4)))
binom.test(6101, 9821, .5)
p_hat = (6101+2)/(9821+4)
num_success = 6101
num_total = 9821
inside_sqrt = ((p_hat*(1-p_hat))/(num_total+4))
lower_p = (p_hat - (1.96*sqrt(inside_sqrt)))
upper_p = (p_hat + (1.96*sqrt(inside_sqrt)))
binom.test(6101, 9821, .5)
print(c(round(p_hat, 4),round(lower_p, 4),round(upper_p, 4)))
num_wrinkled = 12 * (1/4)
standard_dev_wrinkled = sqrt((0.25*(1-0.25))/12)
exactly_two = dbinom(x = 2, size = 12, prob = 0.25)
print(c(round(num_wrinkled, 4), round(standard_dev_wrinkled,4), round(exactly_two, 4)))
exp_
blue = 57
brown = 25
green = 55
orange = 42
red = 44
yellow = 56
sum = 279
exp_blue = blue/sum
exp_brown = brown/sum
exp_green = green/sum
exp_orange = orange/sum
exp_red = red/sum
exp_yellow = yellow/sum
print(((exp_blue - blue)^2)/exp_blue)
observed = c(55, 22)
chisq.test(observed)
dpois(0:3, 0.418)
result = dpois(0:3, 0.418)
result = 273*result
print(result)
result = dpois(0:3, 0.418)
result = dpois(0:3, 0.418)
result
dpois.test(observed)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
data
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
sd = sd(data)
sd
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
sd = sd(data)
mean_ = mean(data)
lower = mean_ - sd
upper = mean_ + sd
lower
upper
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
ggplot(tibble(random=data), aes(random)) +
geom_histogram() +
theme_bw()
library(tidyverse)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
ggplot(tibble(random=data), aes(random)) +
geom_histogram() +
theme_bw()
lower
upper
library(tidyverse)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
data
library(tidyverse)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
data
ggplot(tibble(random=data), aes(random)) +
geom_histogram() +
theme_bw()
sd = sd(data)
mean_ = mean(data)
lower = mean_ - sd
upper = mean_ + sd
num_within = sum(data > lower & data < upper)
num_within
library(tidyverse)
set.seed(33)
data = rnorm(10000, mean = 5, sd = 1.6)
data
ggplot(tibble(random=data), aes(random)) +
geom_histogram() +
theme_bw()
sd = sd(data)
mean_ = mean(data)
lower = mean_ - sd
upper = mean_ + sd
num_within = sum(data > lower & data < upper)
num_within
print(num_within/length(data))
pnorm(5, mean = 2.76, sd = 1.33, lower.tail = FALSE)
#pnorm
higher_ = pnorm(5, mean = 2.76, sd = 1.33, lower.tail = FALSE)
lower_ = pnorm(1, mean = 2.76, sd = 1.33, lower.tail = TRUE)
total = sum(higher_, lower_)
print(total)
?pnorm
set.seed(33)
heights = rnorm(50000, mean=11, sd=4)
sample_heights = sample(heights)[1:1000]
sample_mean = mean(sample_heights)
print(sample_mean)
print(sd(heights)/sqrt(length(heights)))
print(sd(heights)/sqrt(length(sample_heights)))
set.seed(33)
heights = rnorm(50000, mean=11, sd=4)
sample_heights = sample(heights)[1:1000]
sample_mean = mean(sample_heights)
#stderr_mean
stderr_mean = sd(heights)/sqrt(length(sample_heights))
print(stderr_mean)
#Zscore
z_score = ((heights - mean(heights))/stderr_mean)
print(z_score)
set.seed(33)
heights = rnorm(50000, mean=11, sd=4)
sample_heights = sample(heights)[1:1000]
sample_mean = mean(sample_heights)
#stderr_mean
stderr_mean = sd(heights)/sqrt(length(sample_heights))
print(stderr_mean)
#Zscore
z_score = ((sample_mean - mean(heights))/stderr_mean)
print(z_score)
pnorm(z_score, mean = 11, sd = 4, lower.tail = FALSE)
pnorm(z_score, lower.tail = FALSE)
pnorm(z_score, lower.tail = FALSE)*2
sample_means = NULL
for (i in 1:300)
{
sample_means = c(sample_means, mean(sample(heights)[1:1000]))
}
sample_means = NULL
for (i in 1:300)
{
sample_means = c(sample_means, mean(sample(heights)[1:1000]))
}
sample_means
sample_means = NULL
for (i in 1:300)
{
sample_means = c(sample_means, mean(sample(heights)[1:1000]))
}
mean(sample_means)
sample_means = NULL
for (i in 1:150)
{
sample_means = c(sample_means, mean(sample(heights)[1:1000]))
}
mean(sample_means)
sample_means = NULL
for (i in 1:1)
{
sample_means = c(sample_means, mean(sample(heights)[1:1000]))
}
mean(sample_means)
?t.test
t = (19.478378 - 1.374194) / 0.01374194
t.test(t)
t.test(c(16,17,18,19), alternative = c("two.sided"))
t.test(c(15,16,17,18,19), mu = 18, alternative = c("two.sided"))
getwd()
setwd("/Users/brent/Desktop/python-cs418/code")
patterns <- readLines("input.txt");
k <- nchar(patterns[1]);
vx.start <- substring(patterns,1,k-1);
vx.end <- substring(patterns,2,k);
paths <- paste(vx.start,vx.end, sep=" -> ");
graph.desc <- strsplit(paths," -> ");
g.adj <- t(matrix(unlist(sapply(graph.desc, function(x){
rbind(x[1],unlist(strsplit(x[2],",")));
})), nrow=2));
g.nodes <- data.frame(row.names=unique(c(g.adj)));
g.nodes$e.in <-
table(factor(g.adj[,2], levels=rownames(g.nodes)))[rownames(g.nodes)];
g.nodes$e.out <-
table(factor(g.adj[,1], levels=rownames(g.nodes)))[rownames(g.nodes)];
g.nodes$unique <- ((g.nodes$e.in * g.nodes$e.out) == 1);
contigs <- NULL;
startPos <- 1;
while((startPos <= nrow(g.adj)) &&
(g.nodes[g.adj[startPos,1],"unique"] == 1)){
startPos <- startPos+1;
}
path <- g.adj[startPos,];
while(startPos <= nrow(g.adj)){
if(g.nodes[tail(path,1),"unique"]){
nextRow <- match(tail(path,1),g.adj[,1]);
newNode <- g.adj[nextRow,2];
path <- c(path,newNode);
} else { ## spit out contig, move to next contig start
contigs <- c(contigs,paste0(paste(substring(head(path,-1),1,1),
collapse=""),
tail(path,1)));
startPos <- startPos+1;
while((startPos <= nrow(g.adj)) &&
(g.nodes[g.adj[startPos,1],"unique"] == 1)){
startPos <- startPos+1;
}
path <- if(startPos <= nrow(g.adj)){
g.adj[startPos,];
} else { NULL }
}
}
if(length(path) > 1){
contigs <- c(contigs,paste0(paste(substring(head(path,-1),1,1),
collapse=""),
tail(path,1)));
}
cat(sort(contigs),sep="\n");
cat(sort(contigs),sep="\n", file="output.txt")
patterns <- readLines("input.txt");
k <- nchar(patterns[1]);
vx.start <- substring(patterns,1,k-1);
vx.end <- substring(patterns,2,k);
paths <- paste(vx.start,vx.end, sep=" -> ");
graph.desc <- strsplit(paths," -> ");
g.adj <- t(matrix(unlist(sapply(graph.desc, function(x){
rbind(x[1],unlist(strsplit(x[2],",")));
})), nrow=2));
g.nodes <- data.frame(row.names=unique(c(g.adj)));
g.nodes$e.in <-
table(factor(g.adj[,2], levels=rownames(g.nodes)))[rownames(g.nodes)];
g.nodes$e.out <-
table(factor(g.adj[,1], levels=rownames(g.nodes)))[rownames(g.nodes)];
g.nodes$unique <- ((g.nodes$e.in * g.nodes$e.out) == 1);
contigs <- NULL;
startPos <- 1;
while((startPos <= nrow(g.adj)) &&
(g.nodes[g.adj[startPos,1],"unique"] == 1)){
startPos <- startPos+1;
}
path <- g.adj[startPos,];
while(startPos <= nrow(g.adj)){
if(g.nodes[tail(path,1),"unique"]){
nextRow <- match(tail(path,1),g.adj[,1]);
newNode <- g.adj[nextRow,2];
path <- c(path,newNode);
} else { ## spit out contig, move to next contig start
contigs <- c(contigs,paste0(paste(substring(head(path,-1),1,1),
collapse=""),
tail(path,1)));
startPos <- startPos+1;
while((startPos <= nrow(g.adj)) &&
(g.nodes[g.adj[startPos,1],"unique"] == 1)){
startPos <- startPos+1;
}
path <- if(startPos <= nrow(g.adj)){
g.adj[startPos,];
} else { NULL }
}
}
if(length(path) > 1){
contigs <- c(contigs,paste0(paste(substring(head(path,-1),1,1),
collapse=""),
tail(path,1)));
}
print(contigs)
#cat(sort(contigs),sep="\n");
#cat(sort(contigs),sep="\n", file="output.txt")
